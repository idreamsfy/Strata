/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.finance.rate.future;

import java.io.Serializable;
import java.time.Period;
import java.util.Set;

import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;

import com.opengamma.strata.collect.ArgChecker;
import com.opengamma.strata.finance.Template;

import java.util.Map;
import java.util.NoSuchElementException;

import org.joda.beans.Bean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
public class IborFutureTemplate
    implements Template, ImmutableBean, Serializable {

  /**
   * The period between the value date and the start of the number of future iteration.
   * <p>
   * In a futures described as the 2nd quarterly IMM date future in more than one week. The period to start is
   * the one week.
   */
  @PropertyDefinition(validate = "notNull")
  private final Period periodToStart;  
  /**
   * The number of the futures. 
   * <p>
   * This is the number of reference date adjuster after the initial period.
   * <p>
   * In a futures described as the 2nd quarterly IMM date future in more than one week. The number is 2.
   */
  @PropertyDefinition(validate = "ArgChecker.notNegative")
  private final int number;
  /**
   * The underlying futures convention.
   * <p>
   * This specifies the market convention of the Ibor futures to be created.
   */
  @PropertyDefinition(validate = "notNull")
  private final IborFutureConvention convention;

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code IborFutureTemplate}.
   * @return the meta-bean, not null
   */
  public static IborFutureTemplate.Meta meta() {
    return IborFutureTemplate.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(IborFutureTemplate.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static IborFutureTemplate.Builder builder() {
    return new IborFutureTemplate.Builder();
  }

  /**
   * Restricted constructor.
   * @param builder  the builder to copy from, not null
   */
  protected IborFutureTemplate(IborFutureTemplate.Builder builder) {
    JodaBeanUtils.notNull(builder.periodToStart, "periodToStart");
    ArgChecker.notNegative(builder.number, "number");
    JodaBeanUtils.notNull(builder.convention, "convention");
    this.periodToStart = builder.periodToStart;
    this.number = builder.number;
    this.convention = builder.convention;
  }

  @Override
  public IborFutureTemplate.Meta metaBean() {
    return IborFutureTemplate.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the period between the value date and the start of the number of future iteration.
   * <p>
   * In a futures described as the 2nd quarterly IMM date future in more than one week. The period to start is
   * the one week.
   * @return the value of the property, not null
   */
  public Period getPeriodToStart() {
    return periodToStart;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the number of the futures.
   * <p>
   * This is the number of reference date adjuster after the initial period.
   * <p>
   * In a futures described as the 2nd quarterly IMM date future in more than one week. The number is 2.
   * @return the value of the property
   */
  public int getNumber() {
    return number;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the underlying futures convention.
   * <p>
   * This specifies the market convention of the Ibor futures to be created.
   * @return the value of the property, not null
   */
  public IborFutureConvention getConvention() {
    return convention;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      IborFutureTemplate other = (IborFutureTemplate) obj;
      return JodaBeanUtils.equal(getPeriodToStart(), other.getPeriodToStart()) &&
          (getNumber() == other.getNumber()) &&
          JodaBeanUtils.equal(getConvention(), other.getConvention());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getPeriodToStart());
    hash = hash * 31 + JodaBeanUtils.hashCode(getNumber());
    hash = hash * 31 + JodaBeanUtils.hashCode(getConvention());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("IborFutureTemplate{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("periodToStart").append('=').append(JodaBeanUtils.toString(getPeriodToStart())).append(',').append(' ');
    buf.append("number").append('=').append(JodaBeanUtils.toString(getNumber())).append(',').append(' ');
    buf.append("convention").append('=').append(JodaBeanUtils.toString(getConvention())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code IborFutureTemplate}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code periodToStart} property.
     */
    private final MetaProperty<Period> periodToStart = DirectMetaProperty.ofImmutable(
        this, "periodToStart", IborFutureTemplate.class, Period.class);
    /**
     * The meta-property for the {@code number} property.
     */
    private final MetaProperty<Integer> number = DirectMetaProperty.ofImmutable(
        this, "number", IborFutureTemplate.class, Integer.TYPE);
    /**
     * The meta-property for the {@code convention} property.
     */
    private final MetaProperty<IborFutureConvention> convention = DirectMetaProperty.ofImmutable(
        this, "convention", IborFutureTemplate.class, IborFutureConvention.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "periodToStart",
        "number",
        "convention");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -574688858:  // periodToStart
          return periodToStart;
        case -1034364087:  // number
          return number;
        case 2039569265:  // convention
          return convention;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public IborFutureTemplate.Builder builder() {
      return new IborFutureTemplate.Builder();
    }

    @Override
    public Class<? extends IborFutureTemplate> beanType() {
      return IborFutureTemplate.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code periodToStart} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Period> periodToStart() {
      return periodToStart;
    }

    /**
     * The meta-property for the {@code number} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Integer> number() {
      return number;
    }

    /**
     * The meta-property for the {@code convention} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<IborFutureConvention> convention() {
      return convention;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -574688858:  // periodToStart
          return ((IborFutureTemplate) bean).getPeriodToStart();
        case -1034364087:  // number
          return ((IborFutureTemplate) bean).getNumber();
        case 2039569265:  // convention
          return ((IborFutureTemplate) bean).getConvention();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code IborFutureTemplate}.
   */
  public static class Builder extends DirectFieldsBeanBuilder<IborFutureTemplate> {

    private Period periodToStart;
    private int number;
    private IborFutureConvention convention;

    /**
     * Restricted constructor.
     */
    protected Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    protected Builder(IborFutureTemplate beanToCopy) {
      this.periodToStart = beanToCopy.getPeriodToStart();
      this.number = beanToCopy.getNumber();
      this.convention = beanToCopy.getConvention();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -574688858:  // periodToStart
          return periodToStart;
        case -1034364087:  // number
          return number;
        case 2039569265:  // convention
          return convention;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -574688858:  // periodToStart
          this.periodToStart = (Period) newValue;
          break;
        case -1034364087:  // number
          this.number = (Integer) newValue;
          break;
        case 2039569265:  // convention
          this.convention = (IborFutureConvention) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public IborFutureTemplate build() {
      return new IborFutureTemplate(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the period between the value date and the start of the number of future iteration.
     * <p>
     * In a futures described as the 2nd quarterly IMM date future in more than one week. The period to start is
     * the one week.
     * @param periodToStart  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder periodToStart(Period periodToStart) {
      JodaBeanUtils.notNull(periodToStart, "periodToStart");
      this.periodToStart = periodToStart;
      return this;
    }

    /**
     * Sets the number of the futures.
     * <p>
     * This is the number of reference date adjuster after the initial period.
     * <p>
     * In a futures described as the 2nd quarterly IMM date future in more than one week. The number is 2.
     * @param number  the new value
     * @return this, for chaining, not null
     */
    public Builder number(int number) {
      ArgChecker.notNegative(number, "number");
      this.number = number;
      return this;
    }

    /**
     * Sets the underlying futures convention.
     * <p>
     * This specifies the market convention of the Ibor futures to be created.
     * @param convention  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder convention(IborFutureConvention convention) {
      JodaBeanUtils.notNull(convention, "convention");
      this.convention = convention;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(128);
      buf.append("IborFutureTemplate.Builder{");
      int len = buf.length();
      toString(buf);
      if (buf.length() > len) {
        buf.setLength(buf.length() - 2);
      }
      buf.append('}');
      return buf.toString();
    }

    protected void toString(StringBuilder buf) {
      buf.append("periodToStart").append('=').append(JodaBeanUtils.toString(periodToStart)).append(',').append(' ');
      buf.append("number").append('=').append(JodaBeanUtils.toString(number)).append(',').append(' ');
      buf.append("convention").append('=').append(JodaBeanUtils.toString(convention)).append(',').append(' ');
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
