/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.pricer.rate.future;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.strata.basics.date.DayCount;
import com.opengamma.strata.pricer.impl.rate.model.HullWhiteOneFactorPiecewiseConstantInterestRateModel;
import com.opengamma.strata.pricer.impl.rate.model.HullWhiteOneFactorPiecewiseConstantParameters;

/**
 * Provider of convexity factor for futures based on Hull-White one factor model with piecewise constant volatility.
 * <p>
 * Reference: Henrard, M. "The Irony in the derivatives discounting Part II: the crisis", Wilmott Journal, 2010, 2, 301-316
 */
@BeanDefinition(builderScope = "private")
public final class HullWhiteOneFactorPiecewiseConstantConvexityFactorProvider implements ImmutableBean, Serializable {

  /**
   * Hull-White one factor model with piecewise constant volatility.
   */
  private static final HullWhiteOneFactorPiecewiseConstantInterestRateModel MODEL =
      HullWhiteOneFactorPiecewiseConstantInterestRateModel.DEFAULT;
  /**
   * The Hull-White model parameters.
   */
  @PropertyDefinition(validate = "notNull")
  private final HullWhiteOneFactorPiecewiseConstantParameters parameters;
  /** 
   * The day count applicable to the model. 
   */
  @PropertyDefinition(validate = "notNull")
  private final DayCount dayCount;
  /** 
   * The valuation date. 
   * <p>
   * All data items in this environment are calibrated for this date-time. 
   */
  @PropertyDefinition(validate = "notNull")
  private final LocalDate valuationDate;

  /**
   * Creates a provider from Hull-White model parameters, day count and valuation date. 
   * 
   * @param parameters  the Hull-White model parameters
   * @param dayCount  the day count
   * @param valuationDate  the valuation date
   * @return the provider 
   */
  public static HullWhiteOneFactorPiecewiseConstantConvexityFactorProvider of(
      HullWhiteOneFactorPiecewiseConstantParameters parameters,
      DayCount dayCount,
      LocalDate valuationDate) {
    return new HullWhiteOneFactorPiecewiseConstantConvexityFactorProvider(parameters, dayCount, valuationDate);
  }

  /**
   * Computes the future convexity factor for the specified period at the future reference date.
   * 
   * @param referenceDate  the reference date
   * @param startDate  the start date of the period
   * @param endDate  the end date of the period
   * @return the convexity factor
   */
  public double futuresConvexityFactor(LocalDate referenceDate, LocalDate startDate, LocalDate endDate) {
    double referenceTime = relativeYearFraction(referenceDate);
    double startTime = relativeYearFraction(startDate);
    double endTime = relativeYearFraction(endDate);
    return MODEL.futuresConvexityFactor(parameters, referenceTime, startTime, endTime);
  }

  private double relativeYearFraction(LocalDate date) {
    return dayCount.relativeYearFraction(valuationDate, date);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code HullWhiteOneFactorPiecewiseConstantConvexityFactorProvider}.
   * @return the meta-bean, not null
   */
  public static HullWhiteOneFactorPiecewiseConstantConvexityFactorProvider.Meta meta() {
    return HullWhiteOneFactorPiecewiseConstantConvexityFactorProvider.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(HullWhiteOneFactorPiecewiseConstantConvexityFactorProvider.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  private HullWhiteOneFactorPiecewiseConstantConvexityFactorProvider(
      HullWhiteOneFactorPiecewiseConstantParameters parameters,
      DayCount dayCount,
      LocalDate valuationDate) {
    JodaBeanUtils.notNull(parameters, "parameters");
    JodaBeanUtils.notNull(dayCount, "dayCount");
    JodaBeanUtils.notNull(valuationDate, "valuationDate");
    this.parameters = parameters;
    this.dayCount = dayCount;
    this.valuationDate = valuationDate;
  }

  @Override
  public HullWhiteOneFactorPiecewiseConstantConvexityFactorProvider.Meta metaBean() {
    return HullWhiteOneFactorPiecewiseConstantConvexityFactorProvider.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the Hull-White model parameters.
   * @return the value of the property, not null
   */
  public HullWhiteOneFactorPiecewiseConstantParameters getParameters() {
    return parameters;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the day count applicable to the model.
   * @return the value of the property, not null
   */
  public DayCount getDayCount() {
    return dayCount;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the valuation date.
   * <p>
   * All data items in this environment are calibrated for this date-time.
   * @return the value of the property, not null
   */
  public LocalDate getValuationDate() {
    return valuationDate;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      HullWhiteOneFactorPiecewiseConstantConvexityFactorProvider other = (HullWhiteOneFactorPiecewiseConstantConvexityFactorProvider) obj;
      return JodaBeanUtils.equal(getParameters(), other.getParameters()) &&
          JodaBeanUtils.equal(getDayCount(), other.getDayCount()) &&
          JodaBeanUtils.equal(getValuationDate(), other.getValuationDate());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getParameters());
    hash = hash * 31 + JodaBeanUtils.hashCode(getDayCount());
    hash = hash * 31 + JodaBeanUtils.hashCode(getValuationDate());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("HullWhiteOneFactorPiecewiseConstantConvexityFactorProvider{");
    buf.append("parameters").append('=').append(getParameters()).append(',').append(' ');
    buf.append("dayCount").append('=').append(getDayCount()).append(',').append(' ');
    buf.append("valuationDate").append('=').append(JodaBeanUtils.toString(getValuationDate()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code HullWhiteOneFactorPiecewiseConstantConvexityFactorProvider}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code parameters} property.
     */
    private final MetaProperty<HullWhiteOneFactorPiecewiseConstantParameters> parameters = DirectMetaProperty.ofImmutable(
        this, "parameters", HullWhiteOneFactorPiecewiseConstantConvexityFactorProvider.class, HullWhiteOneFactorPiecewiseConstantParameters.class);
    /**
     * The meta-property for the {@code dayCount} property.
     */
    private final MetaProperty<DayCount> dayCount = DirectMetaProperty.ofImmutable(
        this, "dayCount", HullWhiteOneFactorPiecewiseConstantConvexityFactorProvider.class, DayCount.class);
    /**
     * The meta-property for the {@code valuationDate} property.
     */
    private final MetaProperty<LocalDate> valuationDate = DirectMetaProperty.ofImmutable(
        this, "valuationDate", HullWhiteOneFactorPiecewiseConstantConvexityFactorProvider.class, LocalDate.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "parameters",
        "dayCount",
        "valuationDate");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 458736106:  // parameters
          return parameters;
        case 1905311443:  // dayCount
          return dayCount;
        case 113107279:  // valuationDate
          return valuationDate;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends HullWhiteOneFactorPiecewiseConstantConvexityFactorProvider> builder() {
      return new HullWhiteOneFactorPiecewiseConstantConvexityFactorProvider.Builder();
    }

    @Override
    public Class<? extends HullWhiteOneFactorPiecewiseConstantConvexityFactorProvider> beanType() {
      return HullWhiteOneFactorPiecewiseConstantConvexityFactorProvider.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code parameters} property.
     * @return the meta-property, not null
     */
    public MetaProperty<HullWhiteOneFactorPiecewiseConstantParameters> parameters() {
      return parameters;
    }

    /**
     * The meta-property for the {@code dayCount} property.
     * @return the meta-property, not null
     */
    public MetaProperty<DayCount> dayCount() {
      return dayCount;
    }

    /**
     * The meta-property for the {@code valuationDate} property.
     * @return the meta-property, not null
     */
    public MetaProperty<LocalDate> valuationDate() {
      return valuationDate;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 458736106:  // parameters
          return ((HullWhiteOneFactorPiecewiseConstantConvexityFactorProvider) bean).getParameters();
        case 1905311443:  // dayCount
          return ((HullWhiteOneFactorPiecewiseConstantConvexityFactorProvider) bean).getDayCount();
        case 113107279:  // valuationDate
          return ((HullWhiteOneFactorPiecewiseConstantConvexityFactorProvider) bean).getValuationDate();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code HullWhiteOneFactorPiecewiseConstantConvexityFactorProvider}.
   */
  private static final class Builder extends DirectFieldsBeanBuilder<HullWhiteOneFactorPiecewiseConstantConvexityFactorProvider> {

    private HullWhiteOneFactorPiecewiseConstantParameters parameters;
    private DayCount dayCount;
    private LocalDate valuationDate;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 458736106:  // parameters
          return parameters;
        case 1905311443:  // dayCount
          return dayCount;
        case 113107279:  // valuationDate
          return valuationDate;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 458736106:  // parameters
          this.parameters = (HullWhiteOneFactorPiecewiseConstantParameters) newValue;
          break;
        case 1905311443:  // dayCount
          this.dayCount = (DayCount) newValue;
          break;
        case 113107279:  // valuationDate
          this.valuationDate = (LocalDate) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public HullWhiteOneFactorPiecewiseConstantConvexityFactorProvider build() {
      return new HullWhiteOneFactorPiecewiseConstantConvexityFactorProvider(
          parameters,
          dayCount,
          valuationDate);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(128);
      buf.append("HullWhiteOneFactorPiecewiseConstantConvexityFactorProvider.Builder{");
      buf.append("parameters").append('=').append(JodaBeanUtils.toString(parameters)).append(',').append(' ');
      buf.append("dayCount").append('=').append(JodaBeanUtils.toString(dayCount)).append(',').append(' ');
      buf.append("valuationDate").append('=').append(JodaBeanUtils.toString(valuationDate));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
