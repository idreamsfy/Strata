/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.basics.date;

import java.io.Serializable;
import java.time.DayOfWeek;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalAdjusters;

import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;

import com.opengamma.strata.collect.ArgChecker;
import java.util.Set;
import org.joda.beans.Property;
import java.util.Map;
import java.util.NoSuchElementException;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 * Return the next quarterly IMM date for a given date. The quarterly IMM dates are the third Wednesday in March, June,
 * September or December. The dates are not adjusted for holidays.
 * If the date falls on an IMM date, it is returned unadjusted. Sample output for dates is:
 * <p>
 * 2013-01-01 will return 2013-03-20<br>
 * 2013-03-01 will return 2013-03-20<br>
 * 2013-03-19 will return 2013-03-20<br>
 * 2013-03-20 will return 2013-03-20<br>
 * 2013-03-21 will return 2013-06-19<br>
 * 2013-03-31 will return 2013-06-19<br>
 * 2014-12-31 will return 2014-03-19
 */
@BeanDefinition
public final class QuarterlyImmDateAdjuster 
    implements TemporalAdjuster, ImmutableBean, Serializable{
  
  /**
   * The serialization version id.
   */ static final long serialVersionUID = 1L;

  public static final QuarterlyImmDateAdjuster DEFAULT = new QuarterlyImmDateAdjuster();
  
  /* Third Wednesday. */
  private static final TemporalAdjuster THIRD_WEDNESDAY = TemporalAdjusters.dayOfWeekInMonth(3, DayOfWeek.WEDNESDAY);

  @Override
  public Temporal adjustInto(Temporal temporal) {
    ArgChecker.notNull(temporal, "temporal");
    final long month = temporal.getLong(ChronoField.MONTH_OF_YEAR);
    final long offset = month % 3L == 0L ? 0 : 3L - month % 3L;
    final Temporal temp = temporal.plus(offset, ChronoUnit.MONTHS);
    final Temporal immDateInMonth = temp.with(THIRD_WEDNESDAY);
    if (offset == 0L) {
      if (temp.getLong(ChronoField.DAY_OF_MONTH) > immDateInMonth.getLong(ChronoField.DAY_OF_MONTH)) {
        return temp.with(TemporalAdjusters.firstDayOfMonth()).plus(3L, ChronoUnit.MONTHS).with(THIRD_WEDNESDAY);
      }
    }
    return immDateInMonth;
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code QuarterlyImmDateAdjuster}.
   * @return the meta-bean, not null
   */
  public static QuarterlyImmDateAdjuster.Meta meta() {
    return QuarterlyImmDateAdjuster.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(QuarterlyImmDateAdjuster.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static QuarterlyImmDateAdjuster.Builder builder() {
    return new QuarterlyImmDateAdjuster.Builder();
  }

  private QuarterlyImmDateAdjuster() {
  }

  @Override
  public QuarterlyImmDateAdjuster.Meta metaBean() {
    return QuarterlyImmDateAdjuster.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      return true;
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(32);
    buf.append("QuarterlyImmDateAdjuster{");
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code QuarterlyImmDateAdjuster}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null);

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    public QuarterlyImmDateAdjuster.Builder builder() {
      return new QuarterlyImmDateAdjuster.Builder();
    }

    @Override
    public Class<? extends QuarterlyImmDateAdjuster> beanType() {
      return QuarterlyImmDateAdjuster.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code QuarterlyImmDateAdjuster}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<QuarterlyImmDateAdjuster> {

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      throw new NoSuchElementException("Unknown property: " + propertyName);
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      throw new NoSuchElementException("Unknown property: " + propertyName);
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public QuarterlyImmDateAdjuster build() {
      return new QuarterlyImmDateAdjuster();
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      return "QuarterlyImmDateAdjuster.Builder{}";
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
